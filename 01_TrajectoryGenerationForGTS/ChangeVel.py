# -*- coding: utf-8 -*-
"""
Created on Wed Aug 12 10:42:26 2020

@author: Sadiq
"""

import fnmatch
import os
import shutil 
import sys
#sys.path.insert(0, r'F:/OneDrive - unige.it/ViveStudy/4_Software/PythonWorkspace/lib')
sys.path.insert(0, './lib')

import PdlFileGen_lib as pfg


tool_frame_offset = [0, 0, 21.7, 0, 0, 0] # Tool frame offset for vive tracker mount 44.9
#tool_frame_offset = [50, 0, 211, 0, 0, 0] # Tool frame offset for vive controller mount
#tool_frame_offset = [0, 0, 146, 0, 0, 0] # Tool frame offset for vive hmd mount 146.387

spd = 0.050; #m/s
lin_spd = spd;
rot_spd = 0.05;


repName1 = "./ToRobot/XO1"
repName2 = "./ToRobot/XO2"
repName3 = "./ToRobot/XO3"
repName4 = "./ToRobot/YO1"
repName5 = "./ToRobot/YO2"
repName6 = "./ToRobot/YO3"

repName = [repName1, repName2, repName3, repName4, repName5, repName6];


# removing the files with .cod extension in repName folders
for rp in repName:
    files_in_directory = os.listdir(rp)
    filtered_files = [file for file in files_in_directory if file.endswith(".cod")]
    for file in filtered_files:
        path_to_file = os.path.join(rp, file)
        os.remove(path_to_file)

# Removing the previous files in the destination folder
dst = "./ToRobot/DA_H/"
files_in_directory_dst = os.listdir(dst)
for file in files_in_directory_dst:
    path_to_file = os.path.join(dst, file)
    os.remove(path_to_file)


# Replacing the linspd and rot spd lines in repName folders         
line_num = 0;
line_num2 = 0;
line_num3 = 0;

lookup = '$LIN_SPD :='
lookup2 = '$TOOL := '
lookup3 = '#######Moving to starting point...'

count = 0;
for rp in repName:
    count = count +1;
    # searching for file with string"pattern" in it
    for file in os.listdir(rp):
        if fnmatch.fnmatch(file, 'XO*.pdl') | fnmatch.fnmatch(file, 'YO*.pdl'):
            print(file)
            fln = file;
        
    # searching for the line with the string of the lookup
    pthName = os.path.join(rp, fln);
    if (os.path.isfile(pthName)):
        with open(pthName) as myFile:
            for num, line in enumerate(myFile, 0):
                if lookup in line:
                    print('found at line:', num)
                    line_num = num;
                if lookup2 in line:
                    print('found at line:', num)
                    line_num2 = num;
                if lookup3 in line:
                    print('found at line:', num)
                    line_num3 = num;
                    
    # Opening a file and storing the content in a variable
    # replacing the line_num of the file with the new content                 
    f = open(pthName, 'r');
    list_of_lines = f.readlines()
    list_of_lines[line_num] = "\t$LIN_SPD := %.3f\n" %lin_spd
    list_of_lines[line_num+1] = "\t$ROT_SPD := %.3f\n" %rot_spd
    list_of_lines[line_num2] = "\t$TOOL := POS(%f, %f, %f, %f, %f, %f, ' ')\n\n" % (tool_frame_offset[0], tool_frame_offset[1], tool_frame_offset[2], tool_frame_offset[3], tool_frame_offset[4], tool_frame_offset[5])
    start_pose = list_of_lines[line_num3+1]
    # Opening the same file again and replacing all the lines with the new stored variables
    f = open(pthName, "w")
    f.writelines(list_of_lines)
    f.close()
    
    # copying file to DA_H
    shutil.copy2(pthName, dst);
    
    # Copying motion feedback file. Only once is enough
    if count == 1:
        files_in_directory = os.listdir(dst)
        filtered_files = [file for file in files_in_directory if file.endswith(".cod")]
        for file in filtered_files:
            path_to_file = os.path.join(dst, file)
            os.remove(path_to_file)
            
        for file in os.listdir(rp):
            if fnmatch.fnmatch(file, '*motion*.pdl'):
                shutil.copy2(os.path.join(rp,file), dst);   
    
    flnStart = "Start" + fln;
    flnStart = flnStart.replace(".pdl", "");
    # Creating the start prog
    pfg.createStartPDL(flnStart, tool_frame_offset, start_pose)
    # copy the files generated by gen_pdl_file to the new folder
    shutil.move(flnStart + ".pdl", dst)

